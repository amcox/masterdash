library("boot", lib.loc="C:/Program Files/R/R-3.1.0/library")
library("codetools", lib.loc="C:/Program Files/R/R-3.1.0/library")
library("compiler", lib.loc="C:/Program Files/R/R-3.1.0/library")
install.packages(c("boot", "codetools", "ggplot2"))
library("ggplot2", lib.loc="C:/Users/Sumeet/Documents/R/win-library/3.1")
setwd("~/GitHub/masterdash/analysis/r")
library(dplyr)
library(dplyr)
library(gdata)
library(reshape2)
library(ggplot2)
library(scales)
library(gridExtra)
update_functions <- function() {
old.wd <- getwd()
setwd("functions")
sapply(list.files(), source)
setwd(old.wd)
}
update_functions()
multi_test_by_schools_bar_plot <- function(d, s) {
ggplot()+
geom_bar(data=d, aes(x=test_name, y=perc, fill=achievement.level), stat="identity")+
geom_text(data=d.cr, aes(label=round(perc.cr * 100, digits=0), x=test_name, y=perc.cr + .03), size=2)+
scale_x_discrete(limits=test.order)+
scale_y_continuous(labels=percent, breaks=seq(0,1,.1), limits=c(0,1.05))+
scale_fill_manual(values=alPalette.light.lows, guide=F)+
labs(title=paste0(long_labeller("school", s), " 2014-15 Benchmark Scores by Subject and Grade"),
x='Assessment',
y='Percent of Scores'
)+
facet_grid(subject ~ grade, labeller=short_labeller)+
theme_bw()+
theme(axis.text.x=element_text(size=5, angle=90, vjust=0.5),
axis.text.y=element_text(size=6)
)
}
con <- prepare_connection()
df <- create_student_school_scores_roll_up(con)
df <- get_single_score_per_student_with_student_data(con)
df$grade.category <- cut_grade_categories(df$grade)
setwd("~/GitHub/masterdash/analysis/r")
library(dplyr)
library(dplyr)
library(gdata)
library(reshape2)
library(ggplot2)
library(scales)
library(gridExtra)
update_functions <- function() {
old.wd <- getwd()
setwd("functions")
sapply(list.files(), source)
setwd(old.wd)
}
update_functions()
single_test_bar_percs_plot <- function(d, d.cr, test.name.str) {
ggplot()+
geom_bar(data=d, aes(x=school, y=perc, fill=achievement.level), stat="identity")+
geom_text(data=d.cr, aes(label=round(perc.cr * 100, digits=0), x=school, y=(perc.cr + 0.03)), size=2)+
scale_x_discrete(limits=schools)+
scale_y_continuous(labels=percent, breaks=seq(0,1,.1), limits=c(0,1.05))+
scale_fill_manual(values=alPalette.light.lows, guide=F)+
labs(title=paste0("2014-15 ", test.name.str, " Scores"),
x='School',
y='Percent of Scores'
)+
facet_grid( ~ grade, labeller=short_labeller)+
theme_bw()+
theme(axis.text.x=element_text(size=9, angle=90, vjust=0.5),
axis.text.y=element_text(size=7)
)
}
con <- prepare_connection()
df <- create_student_school_scores_roll_up(con)
make_small_school_labels <- function(d) {
apply(d, 1, function(r){
paste0(r['school'], r['grade.category'])
})
}
make_small_school <- function(r, grade.col='grade') {
if(r['school'] == 'SCH'){
gc <- cut(as.numeric(r[grade.col]), c(-5, 4, 7, 9),
labels=c("PK-3", "4-6", "7-8"), right=FALSE
)
}else{
gc <- cut(as.numeric(r[grade.col]), c(-5, 3, 6, 9),
labels=c("PK-2", "3-5", "6-8"), right=FALSE
)
}
return(paste(r['school'], gc, sep=' '))
}
cut_grade_categories <- function(vec) {
cut(vec, c(-2, 2, 6, 9),
labels=c("PK_2", "3_5", "6_8"), right=FALSE
)
}
df <- create_student_school_scores_roll_up(con)
df <- get_single_score_per_student_with_student_data(con)
df$grade.category <- cut_grade_categories(df$grade)
all.grades
cut_grade_categories <- function(vec) {
cut(vec, c(-2, 2, 6, 9),
labels=c("PK_2", "3_5", "6_8"), right=TRUE
)
}
df <- create_student_school_scores_roll_up(con)
df$grade
str(df)
df <- get_single_score_per_student_with_student_data(con)
df$grade.category <- cut_grade_categories(df$grade)
str(df)
cut_grade_categories <- function(vec) {
cut(vec, c(-2, 2, 6, 9),
labels=c("PK_2", "3_5", "6_8"), right=TRUE
)
}
df$grade.category <- cut_grade_categories(df$grade)
cut_grade_categories(df$grade)
grade
all.grades
get_scores_enrollments_data <- function(con=NA){
scores.enrollments.query <- "SELECT s.*,
e.subject enrollment_subject,
e.grade grade,
e.school school,
e.section section,
t.teacher_number teacher_number,
t.name teacher_name,
tests.name test_name,
tests.order test_order
FROM enrollments e
JOIN scores s ON s.student_id = e.student_id AND e.subject = s.subject
JOIN teachers t ON t.id = e.teacher_id
JOIN tests ON tests.id = s.test_id"
return(dbGetQuery(con, scores.enrollments.query))
}
get_enrollments_data <- function(con=NA){
enrollments.query <- "SELECT
s.student_number,
e.subject subject,
e.grade grade,
e.school school,
e.section section,
t.teacher_number teacher_number,
t.name teacher_name
FROM enrollments e
JOIN teachers t ON t.id = e.teacher_id
JOIN students s ON s.id = e.student_id"
return(dbGetQuery(con, enrollments.query))
}
get_students_data <- function(con) {
students.query <- "SELECT DISTINCT
s.student_number,
e.subject subject,
e.grade grade
FROM enrollments e
JOIN students s ON s.id = e.student_id"
return(dbGetQuery(con, students.query))
}
get_observation_data <- function(con) {
obs.query <- "SELECT
o.*,
t.*
FROM observations o
JOIN teachers t ON t.id = o.teacher_id"
return(dbGetQuery(con, obs.query))
}
library(RPostgreSQL)
prepare_connection <- function(aws=F, username=db.username, pw=db.password){
if(aws) {
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname="masterdash",
host="masterdashcurrent.cmyogvwshjn6.us-west-2.rds.amazonaws.com",
port=5432,
user='masteruser',
password=aws.password
)
return(con)
}else{
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname="masterdash_development", host="localhost", port=5432, user=username, password=pw)
return(con)
}
}
check_for_con_and_create <- function(con_to_test=NA){
if(is.na(con_to_test)){
con <- prepare_connection()
}
return(con)
}
get_scores_enrollments_data <- function(con=NA){
scores.enrollments.query <- "SELECT s.*,
e.subject enrollment_subject,
e.grade grade,
e.school school,
e.section section,
t.teacher_number teacher_number,
t.name teacher_name,
tests.name test_name,
tests.order test_order
FROM enrollments e
JOIN scores s ON s.student_id = e.student_id AND e.subject = s.subject
JOIN teachers t ON t.id = e.teacher_id
JOIN tests ON tests.id = s.test_id"
return(dbGetQuery(con, scores.enrollments.query))
}
get_school_scores_enrollments_data <- function(con=NA) {
# This returns one score per student-school-subject-test
# with section information
scores.enrollments.query <- "SELECT s.*,
e.grade grade,
e.school school,
e.section section,
t.teacher_number teacher_number,
t.name teacher_name,
tests.name test_name,
tests.order test_order
FROM (
SELECT student_id,
subject,
school,
teacher_id,
MAX(grade) grade,
year,
MAX(section) section,
class_type
FROM enrollments
GROUP BY student_id, subject, school, teacher_id, year, class_type
) e
JOIN scores s ON s.student_id = e.student_id AND e.subject = s.subject
JOIN teachers t ON t.id = e.teacher_id
JOIN tests ON tests.id = s.test_id"
return(dbGetQuery(con, scores.enrollments.query))
}
get_single_score_per_student_with_student_data <- function(con=NA) {
# This returns one score per student-school-subject-test
# without section information, with student ID
q <- "SELECT s.*,
e.grade grade,
e.school school,
tests.name test_name,
tests.order test_order,
st.student_number student_number,
st.name student_name
FROM (
SELECT student_id,
subject,
school,
MAX(grade) grade,
year
FROM enrollments
WHERE class_type = 'Core'
GROUP BY student_id, subject, school, year
) e
JOIN scores s ON s.student_id = e.student_id AND e.subject = s.subject
JOIN tests ON tests.id = s.test_id
JOIN students st ON st.id = s.student_id"
return(dbGetQuery(con, q))
}
get_enrollments_data <- function(con=NA){
enrollments.query <- "SELECT
s.student_number,
e.subject subject,
e.grade grade,
e.school school,
e.section section,
t.teacher_number teacher_number,
t.name teacher_name
FROM enrollments e
JOIN teachers t ON t.id = e.teacher_id
JOIN students s ON s.id = e.student_id"
return(dbGetQuery(con, enrollments.query))
}
get_students_data <- function(con) {
students.query <- "SELECT DISTINCT
s.student_number,
e.subject subject,
e.grade grade
FROM enrollments e
JOIN students s ON s.id = e.student_id"
return(dbGetQuery(con, students.query))
}
get_observation_data <- function(con) {
obs.query <- "SELECT
o.*,
t.*
FROM observations o
JOIN teachers t ON t.id = o.teacher_id"
return(dbGetQuery(con, obs.query))
}
get_sped_scores_data <- function(con) {
sped.scores.query <- "SELECT *,
CASE achievement_level
WHEN 'B2' THEN 'M'
WHEN 'AB2' THEN 'B'
WHEN 'F' THEN 'AB'
WHEN 'PF' THEN 'U'
ELSE achievement_level
END adj_achievement_level,
CASE
WHEN state_test = 'LAA' THEN 'laa'
WHEN iep_speech_only THEN 'speech_only'
WHEN la_sped = 1 THEN 'iep_no_speech'
ELSE 'gened'
END sped_category
FROM (
SELECT s.*,
st.la_sped,
st.iep_speech_only,
st.student_number,
CASE e.subject
WHEN 'ela' THEN
st.state_test_ela
WHEN 'math' THEN
st.state_test_math
WHEN 'sci' THEN
st.state_test_sci
WHEN 'soc' THEN
st.state_test_soc
ELSE NULL
END state_test,
e.subject subject,
e.grade grade,
e.school school,
tests.name test_name,
tests.order test_order
FROM (
SELECT student_id,
subject,
school,
MAX(grade) grade,
year,
class_type
FROM enrollments
GROUP BY student_id, subject, school, year, class_type
) e
JOIN scores s ON s.student_id = e.student_id AND e.subject = s.subject
JOIN tests ON tests.id = s.test_id
JOIN students st ON s.student_id = st.id
) scores_info
WHERE achievement_level NOT IN ('WTS', 'MS', 'ES')"
d <- data.frame(dbGetQuery(con, sped.scores.query), stringsAsFactors=T)
d <- data.frame(rapply(d, as.factor, classes="character",
how="replace")
)
return(d)
}
load_report_card_data <- function(){
read.csv(file="./../Data/rc grades.csv", head=TRUE, na.string=c("", " ", "  ", 'NULL'))
}
load_student_vam_data <- function(){
read.csv(file="./../Data/student vam cleaned.csv", head=TRUE, na.string=c("", " ", "  ", 'NULL'))
}
load_star_model_data <- function(){
read.csv(file="./../Data/star model data.csv", head=TRUE, na.string=c("", " ", "  ", 'NULL'),
stringsAsFactors=F
)
}
load_star_raw_data <- function(){
read.csv(file="./../Data/star raw data.csv", head=TRUE, na.string=c("", " ", "  ", 'NULL'),
stringsAsFactors=F
)
}
df <- create_student_school_scores_roll_up(con)
df$grade.category <- cut_grade_categories(df$grade)
cut_grade_categories <- function(vec) {
cut(vec, c(-2, 2, 6, 9),
labels=c("PK_2", "3_5", "6_8"), right=FALSE
)
}
df$grade.category <- cut_grade_categories(df$grade)
df$small.school <- make_small_school_labels(df)
df <- create_student_school_scores_roll_up(con)
cut_grade_categories <- function(vec)
{
cut(vec, c(-2, 2, 6, 9),
labels=c("PK_2", "3_5", "6_8"), right=FALSE
)
}
df <- get_single_score_per_student_with_student_data(con)
df <- get_single_score_per_student_with_student_data(con)
library(RPostgreSQL)
prepare_connection <- function(aws=F, username=db.username, pw=db.password){
if(aws) {
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname="masterdash",
host="masterdashcurrent.cmyogvwshjn6.us-west-2.rds.amazonaws.com",
port=5432,
user='masteruser',
password=aws.password
)
return(con)
}else{
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname="masterdash_development", host="localhost", port=5432, user=username, password=pw)
return(con)
}
}
df <- get_single_score_per_student_with_student_data(con)
View(df)
View(df)
prepare_connection <- function(aws=F, username=db.username, pw=db.password){
if(aws) {
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname="masterdash",
host="masterdashcurrent.cmyogvwshjn6.us-west-2.rds.amazonaws.com",
port=5432,
user='masteruser',
password=aws.password
)
return(con)
}else{
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname="masterdash_development", host="localhost", port=5432, user=username, password=pw)
return(con)
}
}
check_for_con_and_create <- function(con_to_test=NA){
if(is.na(con_to_test)){
con <- prepare_connection()
}
return(con)
}
